# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet iff "if ..." b
if (${1}) {
	${2}
}
endsnippet

snippet do "const {} = object" b
const { ${2} } = ${1};
endsnippet

snippet da "const [] = array" b
const [${2}] = ${1};
endsnippet

snippet clg "console.log" b
console.log(${1});
endsnippet

snippet cld "console.dir" b
console.dir(${1});
endsnippet

snippet clt "console.table" b
console.table(${1});
endsnippet

snippet imp "import ... from ..." b
import ${2} from '${1}';
endsnippet

snippet imd "import {} from ..." b
import { ${2} } from '${1}';
endsnippet

snippet ima "import ... as ... from ..." b
import ${3} as ${2} from '${1}';
endsnippet

snippet impt "import PropTypes from 'prop-types'" b
import PropTypes from 'prop-types';
endsnippet

snippet exp "export default ..." b
export default ${1};
endsnippet

snippet exd "export {} from ..." b
export { ${2} } from '${1}';
endsnippet

snippet exc "export const ${0} = ${1}" b
export const ${1} = ${2}
endsnippet

snippet fun "function () {}" b
function ${1}(${2}) {
	${3}
}
endsnippet

snippet afun "async function () {}" b
async function ${1}(${2}) {
	${3}
}
endsnippet

snippet rfc "react function component" b
import React from 'react';

function ${1}(props) {
	$0
}

export default ${1};
endsnippet

snippet rsc "react single component" b
import React from 'react';
import { render } from 'react-dom';

function ${1}() {
	return (
		$0
	)
}

render(<${1}/>, document.querySelector('#app'));
endsnippet

snippet rfcp "react function component with propTypes" b
import React from 'react';
import PropTypes from 'prop-types';

function ${1}(props) {
	${2}
}

${1}.propTypes = {
	
}

export default ${1};
endsnippet

snippet pt "PropTypes." b
${1}: PropTypes.${2}
endsnippet

snippet ptr "PropTypes.isRequired" b
${1}: PropTypes.${2}.isRequired
endsnippet

snippet try "try.catch" b
try {
	${2}
} catch(e) {
	${1}
}
endsnippet
